{
  "version": 3,
  "sources": ["../../../../node_modules/@hookform/resolvers/src/validateFieldsNatively.ts", "../../../../node_modules/@hookform/resolvers/src/toNestError.ts", "../../../../node_modules/@hookform/resolvers/joi/src/joi.ts"],
  "sourcesContent": ["import {\n  get, FieldError, ResolverOptions, Ref, FieldErrors\n} from 'react-hook-form';\n\nconst setCustomValidity = (ref: Ref, fieldPath: string, errors: FieldErrors) => {\n  if (ref && 'reportValidity' in ref) {\n    const error = get(errors, fieldPath) as FieldError | undefined;\n    ref.setCustomValidity((error && error.message) || '');\n\n    ref.reportValidity();\n  }\n};\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n\n\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      setCustomValidity(field.ref, fieldPath, errors)\n    } else if (field.refs) {\n      field.refs.forEach((ref: HTMLInputElement) => setCustomValidity(ref, fieldPath, errors))\n    }\n  }\n};\n", "import {\n  set,\n  get,\n  FieldErrors,\n  Field,\n  ResolverOptions,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const toNestError = <TFieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n\n    set(\n      fieldErrors,\n      path,\n      Object.assign(errors[path], { ref: field && field.ref }),\n    );\n  }\n\n  return fieldErrors;\n};\n", "import { appendErrors, FieldError } from 'react-hook-form';\nimport { toNestError, validateFieldsNatively } from '@hookform/resolvers';\nimport type { ValidationError } from 'joi';\nimport { Resolver } from './types';\n\nconst parseErrorSchema = (\n  error: ValidationError,\n  validateAllFieldCriteria: boolean,\n) =>\n  error.details.length\n    ? error.details.reduce<Record<string, FieldError>>((previous, error) => {\n        const _path = error.path.join('.');\n\n        if (!previous[_path]) {\n          previous[_path] = { message: error.message, type: error.type };\n        }\n\n        if (validateAllFieldCriteria) {\n          const types = previous[_path].types;\n          const messages = types && types[error.type!];\n\n          previous[_path] = appendErrors(\n            _path,\n            validateAllFieldCriteria,\n            previous,\n            error.type,\n            messages\n              ? ([] as string[]).concat(messages as string[], error.message)\n              : error.message,\n          ) as FieldError;\n        }\n\n        return previous;\n      }, {})\n    : {};\n\nexport const joiResolver: Resolver =\n  (\n    schema,\n    schemaOptions = {\n      abortEarly: false,\n    },\n    resolverOptions = {},\n  ) =>\n  async (values, context, options) => {\n    const _schemaOptions = Object.assign({}, schemaOptions, {\n      context,\n    });\n\n    let result: Record<string, any> = {};\n    if (resolverOptions.mode === 'sync') {\n      result = schema.validate(values, _schemaOptions);\n    } else {\n      try {\n        result.value = await schema.validateAsync(values, _schemaOptions);\n      } catch (e) {\n        result.error = e;\n      }\n    }\n\n    if (result.error) {\n      return {\n        values: {},\n        errors: toNestError(\n          parseErrorSchema(\n            result.error,\n            !options.shouldUseNativeValidation &&\n              options.criteriaMode === 'all',\n          ),\n          options,\n        ),\n      };\n    }\n\n    options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n    return {\n      errors: {},\n      values: result.value,\n    };\n  };\n"],
  "mappings": "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",
  "names": ["setCustomValidity", "ref", "fieldPath", "errors", "error", "get", "message", "reportValidity", "validateFieldsNatively", "options", "field", "fields", "refs", "forEach", "toNestError", "shouldUseNativeValidation", "fieldErrors", "path", "set", "Object", "assign", "joiResolver", "schema", "schemaOptions", "resolverOptions", "abortEarly", "values", "context", "options", "result", "error", "errors", "toNestError", "validateAllFieldCriteria", "shouldUseNativeValidation", "criteriaMode", "details", "length", "reduce", "previous", "_path", "path", "join", "message", "type", "types", "messages", "appendErrors", "concat", "validateFieldsNatively", "value", "_schemaOptions", "Object", "assign", "f", "mode", "validate", "validateAsync", "e"]
}
